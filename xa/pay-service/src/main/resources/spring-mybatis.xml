<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd    
           http://www.springframework.org/schema/context    
           http://www.springframework.org/schema/context/spring-context-3.0.xsd    
           http://www.springframework.org/schema/aop    
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd    
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://code.alibabatech.com/schema/dubbo 
		   http://code.alibabatech.com/schema/dubbo/dubbo.xsd">
	<!-- 将多个配置文件读取到容器中，交给Spring管理 -->  
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
           <list>  
              <!-- 这里支持多种寻址方式：classpath和file -->  
              <value>classpath:jdbc.properties</value>
              <!-- 推荐使用file的方式引入，这样可以将配置和代码分离 -->  
             <!--  <value>file:/opt/demo/config/demo-mq.properties</value>   -->
            </list>  
        </property>  
    </bean> 

	<import resource="classpath:bytejta-supports-dubbo.xml" />
	<import resource="dubbo-provider.xml" />
 
	<context:component-scan base-package="com.xa.pay.service" />

	<bean id="mysql" class="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource">
		<property name="url" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	<bean id="dataSourceWrap" class="org.bytesoft.bytejta.supports.jdbc.XADataSourceImpl">
		<property name="xaDataSource" ref="mysql" />
	</bean>
	<bean id="dataSource" class="org.apache.commons.dbcp.managed.BasicManagedDataSource">
		<property name="transactionManager" ref="bytejtaTransactionManager" />
		<property name="xaDataSourceInstance" ref="dataSourceWrap" />

		<property name="maxActive" value="50" />
		<property name="initialSize" value="20" />
		<property name="maxWait" value="60000" />
		<property name="minIdle" value="6" />
		<property name="logAbandoned" value="true" />
		<property name="removeAbandoned" value="true" />
		<property name="removeAbandonedTimeout" value="1800" />

		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="validationQuery" value="select 'x' " />
		<property name="validationQueryTimeout" value="1" />
		<property name="timeBetweenEvictionRunsMillis" value="30000" />
		<property name="numTestsPerEvictionRun" value="20" />
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>  
    </bean>  
  
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.xa.pay.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>

</beans>
